package "stabilitytest"

import "nova/standard/network/ServerSocket"
import "nova/standard/network/ClientSocket"
import "nova/standard/network/ConnectionSocket"

public class NetworkStability extends StabilityTestCase
{
	visible static String received = "THIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVED"
	
	public test()
	{
		Console.writeLine("Checking network stability...")
		
		Int port = 24243
		
		ServerSocket server = createServer( port)
		
		ClientThread thread = new ClientThread(program, port)
		
		thread.start()
		
		Console.writeLine("Accepting ClientSocket connection... ")
		
		ConnectionSocket connection = server.acceptClient()
		
		if (connection == null)
		{
			program.fail("Failed to accept the client")
		}
		
		Console.writeLine("Sending String to ClientSocket... ")
		
		if (!connection.out.write(received))
		{
			program.fail("Server unable to send data to client")
		}
		
		Console.writeLine("Waiting for String from ClientSocket... ")
		
		String s = connection.in.readString()
		
		if (s.size != received.size || !s.equals(received))
		{
			program.fail("Server unable to receive correct message from client")
		}
		
		thread.join()
		
		Console.write("Attempting to close ServerSocket connection... ")
		
		if (!server.close())
		{
			program.fail("Unable to close server")
		}

		Console.writeLine("OK")
	}
	
	createServer(Int port) -> ServerSocket
	{
		ServerSocket server = new ServerSocket()
		
		Console.write("Attempting to start ServerSocket on port " + port + "... ")
		
		if (!server.start(port))
		{
			program.fail("Unable to start server on port " + port)
		}
		
		Console.writeLine("OK")
		
		return server
	}
}