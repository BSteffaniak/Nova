package "stabilitytest"

import "nova/standard/datastruct/list/Iterator"

public class SyntaxStability extends StabilityTestCase
{
	public test()
	{
		checkLoops()
		checkUntil()
		checkSwitchStatements()
		checkMultipleReturnValues()
		checkIterators()
	}
	
	checkSwitchStatements()
	{
		Console.write("Checking simple switch statement... ")
		
		Int  num    = 3
		Bool worked = false
		
		switch (num)
		{
			case 1 program.fail("Switch accepted incorrect case")
			case 2 program.fail("Switch accepted incorrect case")
			case 3 worked = true
			case 4 program.fail("Switch accepted incorrect case")
			default program.fail("Switch failed to accept the correct case")
		}
		
		if (!worked)
		{
			program.fail("FAIL")
		}
		
		Console.writeLine("OK")
		
		Console.write("Checking simple switch statement with indentation... ")
		
		num    = 3
		worked = false
		
		switch (num)
			case 1
				program.fail("Switch accepted incorrect case")
			case 2	program.fail("Switch accepted incorrect case")
			case 3
				worked = true
			case 4
				program.fail("Switch accepted incorrect case")
			default
				program.fail("Switch failed to accept the correct case")
		
		if (!worked)
		{
			program.fail("FAIL")
		}
		
		Console.writeLine("OK")
		
		Console.write("Checking simple switch statement with scopes... ")
		
		num    = 3
		worked = false
		
		switch (num)
		{
			case 1
			{
				program.fail("Switch accepted incorrect case")
			}
			case 2
			{
				program.fail("Switch accepted incorrect case")
			}
			case 3
			{
				worked = true
			}
			case 4
			{
				program.fail("Switch accepted incorrect case")
			}
			default
			{
				program.fail("Switch failed to accept the correct case")
			}
		}
		
		if (!worked)
		{
			program.fail("FAIL")
		}
		
		Console.writeLine("OK")
		
		Console.write("Checking switch statement with variable case values... ")
		
		Int val = 1
		num     = 3
		worked  = false
		
		switch (num)
		{
			case (val++)
			{
				program.fail("Switch accepted incorrect case")
			}
			case val++
			{
				program.fail("Switch accepted incorrect case")
			}
			case (val++)
			{
				worked = true
			}
			case val++
			{
				program.fail("Switch accepted incorrect case")
			}
			default
			{
				program.fail("Switch failed to accept the correct case")
			}
		}
		
		if (!worked)
		{
			program.fail("FAIL")
		}
		
		Console.writeLine("OK")
		
		Console.write("Checking switch statement with variable case values and fallthrough... ")
		
		val    = 1
		num    = 3
		worked = false
		
		Bool worked2 = false
		
		switch (num++)
		{
			case val++
			{
				program.fail("Switch accepted incorrect case")
			}
			case val++
			{
				program.fail("Switch accepted incorrect case")
			}
			case val++
			{
				worked = true
				fallthrough
			}
			case val++
			{
				worked2 = true
			}
			default
			{
				program.fail("Switch failed to accept the correct case")
			}
		}
		
		if (!worked || !worked2)
		{
			program.fail("FAIL")
		}
		
		Console.writeLine("OK")
	}
	
	checkLoops()
	{
		checkWhileLoops()
		checkForLoops()
	}
	
	checkWhileLoops()
	{
		Console.write("Checking inline while loop... ")
		
		Int num  = 0
		Int num2 = 0
		Int num3 = 0
		
		while (num < 100) num++
		
		while (num2 < 100)
			num2++
		
		while (num3 < 100)
			if (true)
				if (true)
				{
					num3++
				}
		
		if (num != 100 || num2 != 100 || num3 != 100)
		{
			program.fail("Inline while loop failed.")
		}
		
		Console.writeLine("OK")
	}
	
	checkForLoops()
	{
		Console.write("Checking inline for loop... ")
		
		Int num  = 0
		Int num2 = 0
		Int num3 = 0
		
		for (Int i = 0; i < 100; i++) num++
		
		for (Int i = 0; i < 100; i++)
			num2++
		
		for (Int i = 0; i < 100; i++)
			if (true)
				if (true)
				{
					num3++
				}
		
		if (num != 100 || num2 != 100 || num3 != 100)
		{
			program.fail("Inline for loop failed.")
		}
		
		Console.writeLine("OK")
	}
	
	checkUntil()
	{
		Console.write("Checking until statement... ")
		
		Object obj = null
		
		until (obj != null)
		{
			obj = test1()
			obj = test2()
			obj = test3()
			
			program.fail("Failed to stop after correct condition")
		}
		
//		if (obj == null)
//		{
//			obj = test1();
//			if (obj == null)
//			{
//				obj = test2();
//				if (obj == null)
//				{
//					obj = test3();
//					if (obj == null)
//					{
//						program.fail("Until statement failed");
//					}
//				}
//			}
//		}
		
		if (obj == null)
		{
			program.fail("Failed to reach correct condition");
		}
		
		Console.writeLine("OK");
	}
	
	static test1() -> Object
	{
		return null
	}
	
	static test2() -> Object
	{
		return null
	}
	
	static test3() -> Object
	{
		return new Object()
	}
	
	checkMultipleReturnValues()
	{
		Console.write("Checking methods with multiple return values... ")
		
		Int ret1 = 1
		Int ret2 = 2
		
		ret1, ret2 = ret2()
		
		if (ret1 != 5 || ret2 != 2)
		{
			program.fail("Failed to pass over second return value")
		}
		
		ret1 = 1
		ret2 = 2
		
		ret1, ret2 = swap(ret1, ret2)
		
		if (ret1 != 2 || ret2 != 1)
		{
			program.fail("Failed to swap primitive values with multiple return values")
		}
		
		String s1 = "hello"
		String s2 = "world"
		
		s1, s2 = swap2(s1, s2)
		
		if (!s1.equals("world") || !s2.equals("hello"))
		{
			program.fail("Failed to swap String values with multiple return values")
		}
		
		Console.writeLine("OK")
	}
	
	static ret2() -> Int, Int
	{
		return 5
	}
	
	static swap(Int a, Int b) -> Int, Int
	{
		return b, a
	}
	
	static swap2(String a, String b) -> String, String
	{
		return b, a
	}
	
	static filterFunc(String i) -> Bool
	{
		return i.size >= 4
	}
	
	static foreachClosure(String s, Int i, Array<String> list)
	{
		if (s.size < 4)
		{
			throw new UnstableException()
		}
	}
	
	checkIterators()
	{
		String[] a = ["this", "is", "a", "test", "to", "see", "what shows up"]
		
		Console.write("Checking filter functionality... ")
		
		Array<String> list = new Array(a, 7)
		Array<String> list2 = list.filter(filterFunc)
		
		try
		{
			list2.forEach(foreachClosure)
		}
		catch (UnstableException e)
		{
			program.fail("Failed to filter data correctly")
		}
		
		for (Int n = 0; n < list2.size; n++)
		{
			if (list2.get(n).size < 4)
			{
				program.fail("Failed to filter data correctly")
			}
		}
		
		/*if (list2.any(x -> x.size < 4))
		{
			program.fail("Failed to filter data correctly")
		}
		if (!list2.all(x -> x.size >= 4))
		{
			program.fail("Failed to filter data correctly")
		}*/
		
		Console.writeLine("OK")
		
		Console.write("Checking iterator functionality... ")
		
		Iterator<String, Int> iter = list2.iterator
		
		while (iter.hasNext)
		{
			if (iter.next.size < 4)
			{
				program.fail("Failed to run iterator")
			}
		}
		
		Console.writeLine("OK")
		
		Console.write("Checking foreach loop functionality... ")
		
		for (string in list2)
		{
			if (string.size < 4)
			{
				program.fail("Failed to run foreach loop")
			}
		}
		
		Console.writeLine("OK")
	}
}