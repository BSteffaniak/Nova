// Testing single line comment on first line.
package "example"

import "nova/standard/math/logic/WFF"
import "nova/standard/math/logic/InvalidFormulaException"
import "nova/standard/math/logic/StatementLetter"
import "nova/standard/datastruct/HashMap"
import "nova/standard/datastruct/Vector2D"
import "nova/standard/network/ServerSocket"
import "nova/standard/star/Window"
import "nova/standard/math/NumericStatement"
import "nova/standard/datastruct/BinaryTree"
import "nova/standard/datastruct/list/Array"
import "nova/standard/datastruct/list/IntArray"
import "nova/standard/datastruct/list/Iterator"
import "nova/standard/datastruct/list/LinkedList"
import "nova/standard/datastruct/list/List"

public class Lab
{
	public static main(String[] args)
	{
		//var v = new Vector2D(2, 3)
		
		//Console.writeLine(v.x + ", " + v.y)
		
		var tree = new BinaryTree().addNode("F").addNode("B").addNode("A").addNode("D").addNode("C").addNode("E").addNode("G").addNode("I").addNode("H")
		
		Console.writeLine("Preorder: #{tree.preorder().join(", ")}")
		Console.writeLine("Inorder: #{tree.inorder().join(", ")}")
		Console.writeLine("Postorder: #{tree.postorder().join(", ")}")
		Console.writeLine("Levelorder: #{tree.levelorder().join(", ")}")
		
		Int num1 = 4
		Int num2
		
		num2 = num1 = 7
		
		Console.writeLine("My nums: #{num1}, #{num2}")
		
		Console.writeLine("Result from ternary: #{num1} #{ num1 < 3 ? "<" : ">=" } 3")
		
		var str = "this isnt null"
		var str2 = null
		
		Console.writeLine("Elvis not null: #{str ?: "wtf"}")
		Console.writeLine("Elvis null: #{str2 ?: "this is null"}")
		
		"test".substring(0)
		
		Console.writeLine((2..8).join(", "))
		
		String[] a = ["this", "is", "a", "test", "to", "see", "what shows up"]
		Int[] b = [1, 2, 3, 4, 5, 6, 7]
		
		var list = new Array<String>(a, 7)
		var list2 = new IntArray(b, 7)
		
		//Console.writeLine("Sum: " + list2.sum())
		
		/*list.filter(x -> x.count > 10).map(x -> getClassByName(x))
		    .forEach(x -> {
		        Console.writeLine(x.fields.map({ _.name }).join(", "))
		    })*/
		
		/*
		Async.execute({
		    Console.writeLine("Wait a second!")
		    Thread.sleep(1000)
		    Console.writeLine("ok, now what")
		})
		
		Console.writeLine("Started async execution")
		*/
        
		Console.writeLine(list.map(x -> {
		    var something = 5 * x.count
            
		    return something + " " + x
		}).join(", "))
        
		Console.writeLine("Mapped: " + list.filter({ _.count >= 4 }).map({ "#{_2}: #{_1}?" }).join(", "))
		Console.writeLine("Mapped backwards: " + list.filter({ _.count >= 4 }).map({ _ + "?" }).reverse().join(", "))
		//Console.writeLine("Mapped2: " + list2.map({ _ + "!" }).join(", "))
		
		//doSomething(list)
		//doSomething(list2)
		
		var linked = new LinkedList()
		
		linked.add("test").add("test2").add("test3")
		
		Console.writeLine("Linked list backwards: " + linked.reverse().join(", "))
		Console.writeLine("Linked list forwards: " + linked.join(", "))
		
		var x = "Hey its a string"
		
		Console.writeLine(x)
		
		takesString(x)

        if (true)
		{
            x = new Array<String>()

            x.add("hey")
            x.add("its now an array")
        }

        //x.add("hey")
        //x.add("its now an array")
		
		Console.writeLine(x)
		
		var sq = new Square(4)

		Console.writeLine(getArea(sq))

//		var s = new NumericStatement("5a + (3 * 2)")
//
//		Console.writeLine(s)
//
//		for (Int i = 0; i < 20; i++)
//		{
//			Window w = new Window()
//
//			w.width = 300
//			w.height = 200
//			w.x = (i % 5) * w.width
//			w.y = (i / 5) * w.height
//			w.title = "Window(#{i}) at (#{w.x}, #{w.y})"
//
//			w.create()
//		}
//		
//		Console.writeLine("")
//		
//		StatementLetter[] letters =
//		[
//			new StatementLetter("A", "McDonald's is open"),
//			new StatementLetter("B", "Sally is awake"),
//			new StatementLetter("C", "McDonald's has food"),
//			new StatementLetter("D", "Sally is fat")
//		]
//		
//		var f = new WFF("A & B & C -> D", letters)
		
		Console.waitForEnter()
	}
	
	static takesString(String s)
	{
	    Console.writeLine("Received " + s)
	}
	
	static doSomething(List list)
	{
	    list.map({ _ + "!!!" }).forEach(Console.writeLine)
	}
	
	static getArea(Polygon p) -> Double
	{
		return p.calculateArea()
	}
}