// Testing single line comment on first line.
package "example"

import "nova/standard/math/logic/WFF"
import "nova/standard/math/logic/InvalidFormulaException"
import "nova/standard/math/logic/StatementLetter"
import "nova/standard/datastruct/HashMap"
import "nova/standard/datastruct/Vector2D"
import "nova/standard/network/ServerSocket"
import "nova/standard/star/Window"
import "nova/standard/math/NumericStatement"
import "nova/standard/datastruct/BinaryTree"
import "nova/standard/datastruct/list/Array"
import "nova/standard/datastruct/list/IntArray"
import "nova/standard/datastruct/list/Iterator"
import "nova/standard/datastruct/list/LinkedList"
import "nova/standard/datastruct/list/List"

public class Lab
{
	public static main(String[] args)
	{
		//Vector2D<Int> v = new Vector2D(2, 3)
		
		//Console.writeLine(v.x + ", " + v.y)
		
		BinaryTree<String> tree = new BinaryTree()
		
		tree.addNode("F").addNode("B").addNode("A").addNode("D").addNode("C").addNode("E").addNode("G").addNode("I").addNode("H")
		
		Console.writeLine("Preorder: " + tree.preorder().join(", "))
		Console.writeLine("Inorder: " + tree.inorder().join(", "))
		Console.writeLine("Postorder: " + tree.postorder().join(", "))
		Console.writeLine("Levelorder: " + tree.levelorder().join(", "))
		
		//"test".size
		
		String[] a = ["this", "is", "a", "test", "to", "see", "what shows up"]
		Int[] b = [1, 2, 3, 4, 5, 6, 7]
		
		Array<String> list = new Array(a, 7)
		Array<Int> list2 = new IntArray(b, 7)
		
		/*list.filter(x -> x.size > 10).map(x -> getClassByName(x))
		    .forEach(x -> {
		        Console.writeLine(x.fields.map(y -> y.name).join(", "))
		    })*/
		
		/*
		Async.execute({
		    Thread.sleep(1000)
		    Console.writeLine("Waited a second")
		})
		
		Console.writeLine("Started async execution")
		*/
		
		Console.writeLine("Mapped: " + list.filter(x -> x.size >= 4).map((x, i) -> i + ": " + x + "?").join(", "))
		Console.writeLine("Mapped backwards: " + list.filter(x -> x.size >= 4).map(x -> x + "?").reverse().join(", "))
		//Console.writeLine("Mapped2: " + list2.map(x -> x + "!").join(", "))
		
		//doSomething(list)
		//doSomething(list2)
		
		LinkedList<String> linked = new LinkedList()
		
		linked.add("test").add("test2").add("test3")
		
		Console.writeLine("Linked list backwards: " + linked.reverse().join(", "))
		Console.writeLine("Linked list forwards: " + linked.join(", "))
		
//		Square sq = new Square(4)
//		
//		Console.writeLine(getArea(sq))
//		
//		NumericStatement s = new NumericStatement("5a + (3 * 2)")
//		
//		Console.writeLine(s)
//		
//		for (Int i = 0; i < 20; i++)
//		{
//			Window w = new Window()
//			
//			w.width = 300
//			w.height = 200
//			w.x = (i % 5) * w.width
//			w.y = (i / 5) * w.height
//			w.title = "Window(" + i + ") at (" + w.x + ", " + w.y + ")"
//			
//			w.create()
//		}
//		
//		Console.writeLine("")
//		
//		StatementLetter[] letters =
//		[
//			new StatementLetter("A", "McDonald's is open"),
//			new StatementLetter("B", "Sally is awake"),
//			new StatementLetter("C", "McDonald's has food"),
//			new StatementLetter("D", "Sally is fat")
//		]
//		
//		WFF f = new WFF("A & B & C -> D", letters)
		
		Console.waitForEnter()
	}
	
	static doSomething(List list)
	{
	    list.map(x -> x + "!!!").forEach(Console.writeLine)
	}
	
	static getArea(Polygon p) -> Double
	{
		return p.calculateArea()
	}
}