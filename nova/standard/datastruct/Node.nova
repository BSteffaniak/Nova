package "nova/standard/datastruct"

import "nova/standard/datastruct/list/Queue"

public class Node<E>
{
	public E data
	
	visible Array<Node<E>>	children
	
	public construct()
	{
		this(null)
	}
	
	public construct(E data)
	{
		children = new Array()
		
		this.data = data
	}
	
	public construct(Int numChildren)
	{
		this(null, numChildren)
	}
	
	public construct(E data, Int numChildren)
	{
		children = new Array(numChildren)
		
		this.data = data
	}
	
	static notNull(Node<E> value) -> Bool
	{
		return value != null && value != 0
	}
	
	public preorder() -> Array<E>
	{
		Array<E> array = new Array()
		
		preorder(array)
		
		return array
	}
	
	preorder(Array<E> array)
	{
		array.add(data)
		
		for (child in children)
		{
			if (child != null && child != 0)
			{
				child.preorder(array)
			}
		}
	}
	
	public inorder() -> Array<E>
	{
		Array<E> array = new Array()
		
		return inorder(array)
	}
	
	inorder(Array<E> array) -> Array<E>
	{
		Int half = Math.ceil(children.size / 2.0)
		
		for (child1 in children.take(half).filter(notNull))
		{
			child1.inorder(array)
		}
		
		array.add(data)
		
		for (child in children.skip(half).filter(notNull))
		{
			child.inorder(array)
		}
		
		return array
	}
	
	public postorder() -> Array<E>
	{
		Array<E> array = new Array()
		
		postorder(array)
		
		return array
	}
	
	postorder(Array<E> array)
	{
		for (child in children.filter(notNull))
		{
			child.postorder(array)
		}
		
		array.add(data)
	}
	
	public levelorder() -> Array<E>
	{
		Array<E> array = new Array()
		
		levelorder(array)
		
		return array
	}
	
	levelorder(Array<E> array)
	{
		Queue<Node<E>> queue = new Queue()
		queue.enqueue(this)
		
		while (!queue.empty)
		{
			Node<E> current = queue.dequeue()
			
			array.add(current.data)
			
			for (child in current.children.filter(notNull))
			{
				queue.enqueue(child)
			}
		}
	}
	
	public toString() -> String
	{
		return data.toString()
	}
}