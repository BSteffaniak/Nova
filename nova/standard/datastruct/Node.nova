package "nova/standard/datastruct"

public class Node<E>
{
	public E data
	
	visible Array<Node<E>>	children
	
	public construct()
	{
		this(null)
	}
	
	public construct(E data)
	{
		children = new Array()
		
		this.data = data
	}
	
	public construct(Int numChildren)
	{
		this(null, numChildren)
	}
	
	public construct(E data, Int numChildren)
	{
		children = new Array(numChildren)
		
		this.data = data
	}
	
	public preorder() -> Array<E>
	{
		Array<E> array = new Array()
		
		preorder(array)
		
		return array
	}
	
	preorder(Array<E> array)
	{
		array.add(data)
		
		for (Int i = 0; i < children.size; i++)
		{
			Node<E> child = children.get(i);
			
			if (child != null && child != 0)
			{
				child.preorder(array)
			}
		}
	}
	
	public inorder() -> String
	{
		String str = ""
		
		for (Int i = 0; i < children.size / 2; i++)
		{
			Node child = children.get(i)
			
			str = str + child.inorder() + ", "
		}
		
		str = str + data
		
		for (Int i = children.size / 2; i < children.size; i++)
		{
			Node child = children.get(i)
			
			str = str + ", " + child.inorder()
		}
		
		return str
	}
	
	public postorder() -> String
	{
		String str = ""
		
		for (Int i = 0; i < children.size; i++)
		{
			Node child = children.get(i)
			
			str = str + child.postorder() + ", "
		}
		
		str = str + data
		
		return str
	}
	
	public levelorder() -> String
	{
		String str = ""
		
		Queue<Node<E>> queue = new Queue()
		queue.enqueue(this)
		
		while (!queue.isEmpty())
		{
			Node<E> current = queue.dequeue()
			
			if (str.size > 0)
			{
				str = str + ", "
			}
			
			str = str + current.data
			
			for (Int i = 0; i < current.children.size; i++)
			{
				Node node = current.children.get(i)
				
				if (node != null)
				{
					queue.enqueue(node)
				}
			}
		}
		
		return str
	}
	
	public toString() -> String
	{
		return data.toString()
	}
}