package "nova/standard"

import "nova/standard/datastruct/Comparable"

public class String implements Comparable<String>
{
	visible Int    count
	
	visible Char[] chars
	
	static Int     whitespaceSize = 4
	static Char[]  whitespace       = [ ' ', '\t', '\n', '\r' ]
	
	external void strcpy(char dst[], char src[])
	external void strcat(char dst[], char src[])
	external int strlen(char chars[])
	external void memcpy(char dst[], char* src[], int count)
	
	public construct(Char c)
	{
		Char chars[] = new Char[2]
		
		chars[0] = c
		chars[1] = '\0'
		
		this(chars)
	}
	
	public construct(Char[] chars)
	{
		this.chars = chars
		
		count = calculateSize()
		
//		if (chars[count] != '\0')
//		{
//			char newData[] = new char[count + 1]
//			
//			strcpy(newData, chars)
//			
//			newData[count] = '\0'
//			
//			this.chars = newData
//		}
		
		if (chars[count] != '\0')
		{
			chars[count] = '\0'
		}
	}
	
	calculateSize() -> Int
	{
		return strlen(chars)
	}
	
	public concat(String str) -> String
	{
		str = str.toString()
		
		Int sz = str.count + count + 1
		
		Char newData[] = new Char[sz]
		
		strcpy(newData, chars)
		strcat(newData, str.chars)
		
		newData[sz - 1] = '\0'
		
		String newStr = new String(newData)
		
		return newStr
	}
	
	public equals(String other) -> Bool
	{
		return compareTo(other) == 0
	}
	
	indexOf(String search, Int start, Int direction) -> Int
	{
	    Int i = start
	    
		while (i < count && i >= 0)
		{
			Bool found = true
			
			Int j = 0
			
			while (j < search.count && i + j < count && found)
			{
				if (search.chars[j] != chars[i + j])
				{
					found = false
				}
				
				j++
			}
			
			if (found)
			{
//				if (direction > 0)
//				{
					return i
//				}
//				else
//				{
//					return i - search.count + 1
//				}
			}
			
			i = i + direction
		}
		
		return -1
	}
	
	public indexOf(String search) -> Int
	{
		return indexOf(search, 0, 1)
	}
	
	public indexOf(String search, Int start) -> Int
	{
		return indexOf(search, start, 1)
	}
	
	public lastIndexOf(String search) -> Int
	{
		return indexOf(search, count - 1, -1)
	}
	
	public substring(Int start, Int end) -> String
	{
		if (end - start == 0)
		{
			return ""
		}
		else if (end - start < 0)
		{
			throw new Exception("Substring bounds of [" + start + ", " + end + "] are invalid")
		}
		
		Char buf[] = new Char[end - start + 1]
		
		memcpy(buf, chars[start], end - start)
		
		buf[end - start] = '\0'
		
		return new String(buf)
	}
	
	public substring(Int start) -> String
	{
		return substring(start, count)
	}
	
	public lastChar() -> Char
	{
		return charAt(count - 1)
	}
	
	public charAt(Int index) -> Char
	{
		return chars[index]
	}
	
	public trim() -> String
	{
		Int start = 0
		Int end   = count - 1
		
		while (start < count && containsChar(chars[start], whitespace, whitespaceSize))
		{
			start++
		}
		
		while (end >= 0 && containsChar(chars[end], whitespace, whitespaceSize))
		{
			end--
		}
		
		if (end == 0)
		{
			return ""
		}
		
		if (start == 0 && end == count - 1)
		{
			return this
		}
		
		return substring(start, end + 1)
	}
	
	static containsChar(Char needle, Char Chars[], Int count) -> Bool
	{
		for (i in 0..count)
		{
			if (needle == Chars[i])
			{
				return true
			}
		}
		
		return false
	}
	
	public toLowerCase() -> String
	{
		return transform(Char.toLowerCase)
	}
	
	public toUpperCase() -> String
	{
		return transform(Char.toUpperCase)
	}
	
	public transform(transform(Char) -> Char) -> String
	{
		Char newData[] = new Char[count]
		
		for (i in 0..count)
		{
			newData[i] = transform(chars[i])
		}
		
		return new String(newData)
	}
	
	public getDataBetween(String before, String after) -> String
	{
		return getDataBetween(before, after, 0)
	}
	
	public getDataBetween(String before, String after, Int start) -> String
	{
		Int s = indexOf(before, start)
		Int e = indexOf(after, s + 1)
		
		if (s >= 0 && e > 0)
		{
			return substring(s + before.count, e)
		}
		
		return ""
	}
	
	public compareTo(String other) -> Int
	{
		for (i in 0..Math.min(count, other.count))
		{
			if (chars[i] - other.chars[i] != 0)
			{
				return chars[i] - other.chars[i]
			}
		}
		
		return count - other.count
	}
	
	public toString() -> String
	{
		return this
	}
}