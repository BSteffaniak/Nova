package "nova/standard"

public class String
{
	visible int   length
	
	char[]        data
	
	static int    whitespaceLength = 4
	static char[] whitespace       = [ ' ', '\t', '\n', '\r' ]
	
	external void strcpy(char dst[], char src[])
	external void strcat(char dst[], char src[])
	external int strlen(char data[])
	external void memcpy(char dst[], char* src[], int length)
	
	public construct(char data[])
	{
		this.data = data
		
		length = calculateLength()
		
//		if (data[length] != '\0')
//		{
//			char newData[] = new char[length + 1]
//			
//			strcpy(newData, data)
//			
//			newData[length] = '\0'
//			
//			this.data = newData
//		}
	}
	
	calculateLength() -> int
	{
		return strlen(data)
	}
	
	public toCharArray() -> char[]
	{
		return data
	}
	
	public concat(String str) -> String
	{
		str = str.toString()
		
		int size = str.length + length + 1
		
		char newData[] = new char[size]
		
		strcpy(newData, data)
		strcat(newData, str.toCharArray())
		
		newData[size - 1] = '\0'
		
		String newStr = new String(newData)
		
		return newStr
	}
	
	public equals(String other) -> bool
	{
		if (length != other.length)
		{
			return false
		}
		
		for (int i = 0; i < length; i++)
		{
			if (data[i] != other.data[i])
			{
				return false
			}
		}
		
		return true
	}
	
	indexOf(String search, int start, int direction) -> int
	{
		for (int i = start; i < length && i >= 0; i = i + direction)
		{
			bool found = true
					
			for (int j = 0; j < search.length && i + j < length && found; j++)
			{
				if (search.data[j] != data[i + j])
				{
					found = false
				}
			}
			
			if (found)
			{
//				if (direction > 0)
//				{
					return i
//				}
//				else
//				{
//					return i - search.length + 1
//				}
			}
		}
		
		return -1
	}
	
	public indexOf(String search) -> int
	{
		return indexOf(search, 0, 1)
	}
	
	public indexOf(String search, int start) -> int
	{
		return indexOf(search, start, 1)
	}
	
	public lastIndexOf(String search) -> int
	{
		return indexOf(search, length - 1, -1)
	}
	
	public substring(int start, int end) -> String
	{
		if (end - start == 0)
		{
			return ""
		}
		else if (end - start < 0)
		{
			throw new Exception()
		}
		
		char buf[] = new char[end - start + 1]
		
		memcpy(buf, data[start], end - start)
		
		buf[end - start] = '\0'
		
		return new String(buf)
	}
	
	public substring(int start) -> String
	{
		return substring(start, length)
	}
	
	public lastChar() -> char
	{
		return charAt(length - 1)
	}
	
	public charAt(int index) -> char
	{
		return data[index]
	}
	
	public trim() -> String
	{
		int start = 0
		int end   = length - 1
		
		while (start < length && containsChar(data[start], whitespace, whitespaceLength))
		{
			start++
		}
		
		while (end >= 0 && containsChar(data[end], whitespace, whitespaceLength))
		{
			end--
		}
		
		if (end == 0)
		{
			return ""
		}
		
		if (start == 0 && end == length - 1)
		{
			return this
		}
		
		return substring(start, end + 1)
	}
	
	static containsChar(char needle, char chars[], int length) -> bool
	{
		for (int i = 0; i < length; i++)
		{
			if (needle == chars[i])
			{
				return true
			}
		}
		
		return false
	}
	
	public toString() -> String
	{
		return this
	}
}