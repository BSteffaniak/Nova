package "nova/standard/exception"

public class ExceptionData
{
	external type buffer
	
	external void jump(buffer buf, int code)
	
	buffer*					buf
	
	ExceptionData			parent
	
	public Exception		thrownException
	
	visible Array<Int>	codes
	
	public construct(buffer* buf)
	{
		this.buf = buf
		codes    = new Array()
	}
	
	public addCode(Int code)
	{
		codes.add(code)
	}
	
	public getBuffer() -> buffer*
	{
		return buf
	}
	
	public getCorrectData(Int code) -> ExceptionData
	{
		ExceptionData data = this
		
		while (data != null)
		{
			Array<Int> list = data.codes
			
			for (i in 0..list.count)
			{
				if (list.get(i) == code)
				{
					return data
				}
			}
			
			if (data.getParent() == null)
			{
				return data
			}
			
			data = data.getParent()
		}
		
		return 0
	}
	
	public getCorrectBuffer(Int code) -> buffer*
	{
		ExceptionData data = getCorrectData(code)
		
		if (data == null)
		{
			return 0
		}
		
		return data.getBuffer()
	}
	
	public jumpToBuffer(Int code)
	{
		ExceptionData data = getCorrectData(code)
		
		if (data.getParent() == null)
		{
			code = 1
		}
		
		buffer* b = data.getBuffer()
		
		jump(b, code)
	}
	
	public getParent() -> ExceptionData
	{
		return parent
	}
	
	public setParent(ExceptionData p)
	{
		parent = p
	}
}