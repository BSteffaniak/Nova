import "ArrayList"

public class ExceptionData
{
	external type buffer
	
	external void jump(buffer buf, int code)
	
	buffer				buf
	
	ExceptionData		parent
	
	visible ArrayList	codes
	
	public construct(buffer buf)
	{
		this.buf = buf
		codes    = new ArrayList()
	}
	
	public addCode(int code)
	{
		codes.add(code)
	}
	
	public getBuffer() -> buffer
	{
		return buf
	}
	
	public getCorrectData(int code) -> ExceptionData
	{
		ExceptionData data = this
		
		while (data != null)
		{
			ArrayList list = data.codes
			
			for (int i = 0; i < list.size; i++)
			{
				if (list.get(i) == code)
				{
					return data
				}
			}
			
			if (data.getParent() == null)
			{
				return data
			}
			
			data = data.getParent()
		}
		
		return 0
	}
	
	public getCorrectBuffer(int code) -> buffer
	{
		ExceptionData data = getCorrectData(code)
		
		if (data == null)
		{
			return 0
		}
		
		return data.getBuffer()
	}
	
	public jumpToBuffer(int code)
	{
		ExceptionData data = getCorrectData(code)
		
		if (data.getParent() == null)
		{
			code = 1
		}
		
		buffer b = data.getBuffer()
		
		jump(b, code)
	}
	
	public getParent() -> ExceptionData
	{
		return parent
	}
	
	public setParent(ExceptionData p)
	{
		parent = p
	}
}