import "math.h"

public class Math
{
	external double abs(double number) as extAbs
	external double sqrt(double number) as extSqrt
	external double pow(double base, double power) as extPow
	external double sin(double number) as extSin
	external double cos(double number) as extCos
	external double tan(double number) as extTan
	external double asin(double number) as extAsin
	external double acos(double number) as extAcos
	external double atan(double number) as extAtan
	external long floor(double number) as extFloor
	external long ceil(double number) as extCeil
	external long rand() as extRand
	
	//visible static double PI = 3.141592653
	
	public static int random(long range)
	{
		return extRand() % range
	}
	
	public static double abs(double number)
	{
		return extAbs(number)
	}
	
	public static double sqrt(double number)
	{
		return extSqrt(number)
	}
	
	public static double pow(double base, double power)
	{
		return extPow(base, power)
	}
	
	public static double sin(double number)
	{
		return extSin(number)
	}
	
	public static double cos(double number)
	{
		return extCos(number)
	}
	
	public static double tan(double number)
	{
		return extTan(number)
	}
	
	public static double asin(double number)
	{
		return extAsin(number)
	}
	
	public static double acos(double number)
	{
		return extAcos(number)
	}
	
	public static double atan(double number)
	{
		return extAtan(number)
	}
	
	public static long round(double number)
	{
		return floor(number + 0.5)
	}
	
	public static long floor(double number)
	{
		return extFloor(number)
	}
	
	public static long ceil(double number)
	{
		return extCeil(number)
	}
	
	/*static int pow(int a, int b)
	{
		if (b == 0)
		{
			return 1
		}
		else if (b > 0)
		{
			return positivePow(a, b)
		}
		else
		{
			return 0
		}
	}
	
	static int positivePow(int a, int b)
	{
		for (int i = b - 2; i >= 0; i--)
		{
			a = a * a
		}
		
		return a
	}*/
}