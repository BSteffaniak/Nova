public class Double extends Number
{
	visible double value
	
	external void sprintf(char buffer[], char format[], double value)
	external char[] realloc(char buffer[], int size)
	external int strlen(char buffer[])
	
	public construct(double value)
	{
		this.value = value
	}
	
	public static numDigits(double number) -> int
	{
		if (number < 0)
		{
			return numDigits(-number) + 1
		}
		
		int size
		
		number = number / 10
		
		for (size = 1; number > 0; size++)
		{
			number = number / 10
		}
		
		return size
	}
	
	static genString(char buffer[], int lastIndex) -> String
	{
		buffer = realloc(buffer, ++lastIndex + 1)
		
		buffer[lastIndex] = '\0'
		
		return new String(buffer)
	}
	
	static genBuffer(double value) -> char[]
	{
		int  size     = 11 + 1 + 15
		char buffer[] = new char[size]
		
		sprintf(buffer, "%.15f", value)
		
		return buffer
	}
	
	static repetition(char buffer[], int start) -> int
	{
		int  index = start
		char c     = buffer[index]
		
		while (buffer[--index] == c);
		
		return start - index - 1
	}
	
	static lastSignificantDigit(char buffer[], int start) -> int
	{
		while (buffer[start--] == '0');
		
		return start + 1
	}
	
	public static toString(double value) -> String
	{
		char buffer[]  = genBuffer(value)
		int  size      = strlen(buffer)
		int  lastIndex = size - 1
		
		char c = buffer[--lastIndex]
		
		if (c == '0' || c == '9')
		{
			while (buffer[lastIndex--] == c);
			
			if (buffer[++lastIndex] == '.')
			{
				lastIndex++
				
				return genString(buffer, lastIndex)
			}
			else
			{
				if (lastIndex >= size - 3 - 4)
				{
					lastIndex = size - 1
				}
				else if (c == '9')
				{
					buffer[lastIndex]++
					
					return genString(buffer, lastIndex)
				}
			}
		}
		else
		{
			int rep = repetition(buffer, lastIndex)
			
			if (rep > 5)
			{
				buffer[lastIndex] = c
				
				if (c >= '5')
				{
					c++;
				}
				
				buffer[++lastIndex] = c
				
				return genString(buffer, lastIndex)
			}
		}
		
		lastIndex = lastSignificantDigit(buffer, size - 1)
		
		return genString(buffer, lastIndex)
	}
	
	public toString() -> String
	{
		return toString(value)
	}
}